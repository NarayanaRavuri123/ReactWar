import { INewOrder, IRequesterInfo } from "../../newOrder.interface";
import {
  IInputField,
  ValidationStatus,
} from "../../../../core/interfaces/input.interface";
import { NewOrderPageSection } from "../../NewOrderContainer.enum";
import { NewOrderContextType } from "../../../../context/NewOrderContext";
import { QuestionTypes, WoundQuestionaries } from "../clinicalInfo.interface";
import { SharedOrderModal } from "../../newOrderFooterGroup/shareOrder/shareOrder.enum";
import { ISecondaryWoundInfo } from "../secondaryWoundInfo/secondaryWoundInfo.interface";
import { SearchPrescriberModal } from "../../prescriberInformation/searchPrescriber.enum";
import { INewOrderWoundInfo } from "../../newOrderWoundInfoStepper/newOrderWoundInfo.interface";
import { SearchHomeCareProviderModal } from "../../homeCareProvider/homeCareSearch/searchHomeCare.enum";
import { IDropZoneDocumentSelect } from "../../../../core/customDropZone/dropZoneDocumentSelect.interface";
import { ShowAdditionalFields } from "../../insuranceInformation/insuranceInformation/insuranceInformation.model";
import { IInsuranceInformation } from "../../insuranceInformation/insuranceInformation/insuranceInformation.interface";

export const mockInputFields = (): IInputField => ({
  valid: ValidationStatus.UNTOUCHED,
  value: "",
  required: true,
  errorMessage: "",
  isDefaultValid: false,
});

export const mockPresDoc = (): IDropZoneDocumentSelect[] => [
  {
    documentName: "test",
    documentBase64: "test",
    succeeded: false,
    errorMessage: "test",
    documentId: null,
    isFetchingBase64: false,
  },
];

export const mockQuestionaire: WoundQuestionaries = {
  additionalQuestion: [
    {
      text: "Is pressure over the wound being releived",
      type: QuestionTypes.RADIO,
      required: "True",
      value: "",
      valid: ValidationStatus.UNTOUCHED,
    },
  ],
  category: "Arterial Ulcer (Arterial Insufficiency)",
  woundType: "Arterial Ulcer (Arterial Insufficiency)",
};

export const mockMap = new Map<string, WoundQuestionaries>();
mockMap.set("Arterial Ulcer (Arterial Insufficiency)", mockQuestionaire);

export const mockInsuranceInputFields = (): IInsuranceInformation => ({
  insuranceType: {
    valid: ValidationStatus.UNTOUCHED,
    value: "",
    required: true,
    errorMessage: "",
    isDefaultValid: false,
  },
  insuranceTypeCode: {
    valid: ValidationStatus.UNTOUCHED,
    value: "",
    required: true,
    errorMessage: "",
    isDefaultValid: false,
  },
  medicare: {
    memberID: {
      valid: ValidationStatus.UNTOUCHED,
      value: "",
      required: true,
      errorMessage: "",
      isDefaultValid: false,
    },
    relationShipInsured: {
      valid: ValidationStatus.UNTOUCHED,
      value: "",
      required: true,
      errorMessage: "",
      isDefaultValid: false,
    },
  },
  medicareAdvantage: {
    payerName: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    groupID: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    memberID: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    relationShipInsured: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    extension: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    payerContactNumber: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
  },
  managedMedicaid: {
    payerName: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    groupID: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    memberID: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    relationShipInsured: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    extension: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    payerContactNumber: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
  },
  commercialInsurance: {
    payerName: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    groupID: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    memberID: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    relationShipInsured: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    extension: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
    payerContactNumber: {
      valid: ValidationStatus.VALID,
      value: "",
      required: true,
      isOptional: true,
    },
  },
  medicaid: {
    memberID: {
      valid: ValidationStatus.UNTOUCHED,
      value: "",
      required: true,
      errorMessage: "",
      isDefaultValid: false,
    },
    relationShipInsured: {
      valid: ValidationStatus.UNTOUCHED,
      value: "",
      required: true,
      errorMessage: "",
      isDefaultValid: false,
    },
  },
  privatePay: {
    valid: ValidationStatus.VALID,
    value: "",
    required: false,
  },
  charityCare: {
    valid: ValidationStatus.VALID,
    value: "",
    required: false,
  },
  otherAdditionalDetails: {
    valid: ValidationStatus.UNTOUCHED,
    value: "",
    required: true,
  },
});

export const mockWoundInfoData: INewOrderWoundInfo = {
  debridementAttempted: mockInputFields(),
  debridementDate: mockInputFields(),
  debridementType: mockInputFields(),
  exposedStructures: mockInputFields(),
  exudateAmount: mockInputFields(),
  exudateAppearance: mockInputFields(),
  isOsteomyelitisPresent: mockInputFields(),
  isTissuePresent: mockInputFields(),
  isTreatemenForResolveBoneInfection: mockInputFields(),
  location1Depth: mockInputFields(),
  location1Position: mockInputFields(),
  location2Depth: mockInputFields(),
  location2Position: mockInputFields(),
  nutriStatusCompromized: mockInputFields(),
  nutritionActions: mockInputFields(),
  osteomyelitisies: mockInputFields(),
  previousTherapies: mockInputFields(),
  previousTherapiesCauses: mockInputFields(),
  previousTherapiesCausesOther: mockInputFields(),
  previousTherapyOther: mockInputFields(),
  woundType: mockInputFields(),
  serialDebridementRequired: mockInputFields(),
  shortNarrativeOfPossibleConsequences: mockInputFields(),
  wndInfoComorbidities: mockInputFields(),
  wndInfoComorbiditiesOther: mockInputFields(),
  woundAge: mockInputFields(),
  woundDepth: mockInputFields(),
  woundDirection: mockInputFields(),
  woundLength: mockInputFields(),
  woundLocation: mockInputFields(),
  woundMeasurementDate: mockInputFields(),
  woundOrientation: mockInputFields(),
  woundThickness: mockInputFields(),
  woundTunneling: mockInputFields(),
  woundWidth: mockInputFields(),
  epthilizationValue: mockInputFields(),
  escharValue: mockInputFields(),
  granulationValue: mockInputFields(),
  sloughValue: mockInputFields(),
  woundBedTotal: mockInputFields(),
  woundUndermining: mockInputFields(),
  underminingLocation1Depth: mockInputFields(),
  underminingLocation1PositionFrom: mockInputFields(),
  underminingLocation1PositionTo: mockInputFields(),
  underminingLocation2Depth: mockInputFields(),
  underminingLocation2PositionFrom: mockInputFields(),
  underminingLocation2PositionTo: mockInputFields(),
  isShowSecondaryWoundInfo: mockInputFields(),
};

export const mockSecondaryWoundInfoData: ISecondaryWoundInfo = {
  debridementAttempted: mockInputFields(),
  debridementDate: mockInputFields(),
  debridementType: mockInputFields(),
  exposedStructures: mockInputFields(),
  exudateAmount: mockInputFields(),
  exudateAppearance: mockInputFields(),
  isTissuePresent: mockInputFields(),
  location1Depth: mockInputFields(),
  location1Position: mockInputFields(),
  location2Depth: mockInputFields(),
  location2Position: mockInputFields(),
  woundType: mockInputFields(),
  serialDebridementRequired: mockInputFields(),
  shortNarrativeOfPossibleConsequences: mockInputFields(),
  woundAge: mockInputFields(),
  woundDepth: mockInputFields(),
  woundDirection: mockInputFields(),
  woundLength: mockInputFields(),
  woundLocation: mockInputFields(),
  woundMeasurementDate: mockInputFields(),
  woundOrientation: mockInputFields(),
  woundThickness: mockInputFields(),
  woundTunneling: mockInputFields(),
  woundWidth: mockInputFields(),
  epthilizationValue: mockInputFields(),
  escharValue: mockInputFields(),
  granulationValue: mockInputFields(),
  sloughValue: mockInputFields(),
  woundBedTotal: mockInputFields(),
  woundUndermining: mockInputFields(),
  underminingLocation1Depth: mockInputFields(),
  underminingLocation1PositionFrom: mockInputFields(),
  underminingLocation1PositionTo: mockInputFields(),
  underminingLocation2Depth: mockInputFields(),
  underminingLocation2PositionFrom: mockInputFields(),
  underminingLocation2PositionTo: mockInputFields(),
};

export const mockShowAddtionalObject: ShowAdditionalFields = {
  typePrimary: {
    medicare: false,
    medicareAdvantage: false,
    managedMedicaid: false,
    commercialInsurance: false,
    medicaid: false,
    charityCare: false,
    privatePay: false,
    otherAdditionalDetails: false,
    workerCompensation: false,
  },
  typeSecondary: {
    medicare: false,
    medicareAdvantage: false,
    managedMedicaid: false,
    commercialInsurance: false,
    medicaid: false,
    charityCare: false,
    privatePay: false,
    otherAdditionalDetails: false,
    workerCompensation: false,
  },
};

export const mockRequesterData: IRequesterInfo = {
  IsRequesterSameasSubmitter: mockInputFields(),
  requesterEmail: mockInputFields(),
  requesterFirstName: mockInputFields(),
  requesterLastName: mockInputFields(),
  requesterFacility: undefined,
  requesterFacilityAsDefault: false,
};

export const getMockNewOrderData = (): NewOrderContextType => ({
  primaryAdditionalQuestions: mockQuestionaire,
  secondaryAdditionalQuestions: undefined,
  isComingFromPrev: undefined,
  isSecondaryOpen: false,
  newOrderData: {
    accidentType: mockInputFields(),
    address1: mockInputFields(),
    address2: mockInputFields(),
    city: mockInputFields(),
    commonDocs: mockInputFields(),
    contributingCause: mockInputFields(),
    homeCareProvider: mockInputFields(),
    addedCaregiverName: mockInputFields(),
    addedCaregiverAddress1: mockInputFields(),
    addedCaregiverAddress2: mockInputFields(),
    addedCaregiverCity: mockInputFields(),
    addedCaregiverState: mockInputFields(),
    addedCaregiverPhone: mockInputFields(),
    addedCaregiverPhoneExtension: mockInputFields(),
    addedCaregiverZip: mockInputFields(),
    addedCaregiverFacilityType: mockInputFields(),
    addedCaregiverFacilityTypeCode: mockInputFields(),
    addedCaregiverSiteUseID: mockInputFields(),
    addedCaregiverID: mockInputFields(),
    addedCaregiverAccountNumber: mockInputFields(),
    dateInitiated: mockInputFields(),
    dateOfAccident: mockInputFields(),
    deliveryContactFirstName: mockInputFields(),
    deliveryContactLastName: mockInputFields(),
    deliveryContactPhone: mockInputFields(),
    deliveryInstructions: mockInputFields(),
    dob: mockInputFields(),
    email: mockInputFields(),
    emergencyContactFirstName: mockInputFields(),
    emergencyContactLastName: mockInputFields(),
    emergencyContactPhoneNumber: mockInputFields(),
    firstName: mockInputFields(),
    goalOfTherapy: mockInputFields(),
    IsSamePermanentAddress: mockInputFields(),
    isSecondaryInsurancePresent: {
      valid: ValidationStatus.VALID,
      value: false,
      isDefaultValid: true,
    },
    lastName: mockInputFields(),
    lengthOfTherapy: mockInputFields(),
    patientCurrentAddress1: mockInputFields(),
    patientCurrentAddress2: mockInputFields(),
    patientCurrentAddressCity: mockInputFields(),
    patientCurrentAddressPhone: mockInputFields(),
    patientCurrentAddressState: mockInputFields(),
    patientCurrentAddressZip: mockInputFields(),
    phone: mockInputFields(),
    primaryInsurance: mockInsuranceInputFields(),
    secondaryInsurance: mockInsuranceInputFields(),
    state: mockInputFields(),
    submitPrescription: mockInputFields(),
    prescriptionDoc: [],
    uploadDocument: [],
    wasNPWTInitiated: mockInputFields(),
    zip: mockInputFields(),
    inpatientFacility: {
      accountId: "",
      accountName: "",
      accountNumber: 12345,
      address1: "",
      address2: "",
      addressId: "",
      city: "",
      state: "",
      typeCode: "",
      typeName: "",
      zip: 44542,
      facilityMode: undefined,
    },
    inpatientFacilityAsDefault: false,
    updatedPrescriberEmail: mockInputFields(),
    loggedInUserSiteUseID: mockInputFields(),
  },
  newOrderPage: NewOrderPageSection.NEWORDER_PATIENT_WOUND_INFO,
  newOrderProgress: 50,
  resetNewOrderForm: () => {},
  resetSecondaryWoundInfoDataForm: () => {},
  resetPrimaryAdditionalQuestions: () => {},
  resetSecondaryAdditionalQuestions: () => {},
  setPrimaryAdditionalQuestions: () => {},
  setSecondaryAdditionalQuestions: () => {},
  setisComingFromPrev: () => {},
  setisSecondaryOpen: () => {},
  setNewOrderData: () => {},
  setNewOrderPage: () => {},
  setnewOrderProgress: () => {},
  setWoundInfoData: () => {},
  setWoundQuestionnaries: () => {},
  woundInfoData: mockWoundInfoData,
  secondaryWoundInfoData: mockSecondaryWoundInfoData,
  setSecondaryWoundInfoData: () => {},
  woundQuestionaries: undefined,
  isWoundBedErrorFirstTime: false,
  setIsWoundBedErrorFirstTime: () => {},
  newOrderDocuments: [],
  setNewOrderDocuments: () => {},
  deletedOrderDocuments: [],
  setDeletedOrderDocuments: () => {},
  errorInUploadFiles: false,
  setErrorInUploadFiles: () => {},
  prescriberSearchAddPopUpSection: SearchPrescriberModal.SEARCH_PRESCRIBER,
  setprescribeSearchAddPopUpSection: () => {},
  npiPrescriberList: undefined,
  setNpiPrescriberList: () => {},
  prescriptionDocuments: mockPresDoc(),
  setPrescriptionDocuments: () => {},
  setSearchPrescriberPopup: () => {},
  searchPrescriberPopup: false,
  prescriberList: undefined,
  setPrescriberList: () => {},
  prescriberAddedData: undefined,
  setPrescriberAddedData: () => {},
  showSize: false,
  setShowSize: () => {},
  showCannisterType: false,
  setshowCannisterType: () => {},
  showQunatity: false,
  setshowQunatity: () => {},
  showSecSize: false,
  setShowSecSize: () => {},
  showSecQunatity: false,
  setshowSecQunatity: () => {},
  showPrimaryDressingKit: false,
  setShowPrimaryDressingKit: () => {},
  showSecondaryDressingKit: false,
  setShowSecondaryDressingKit: () => {},
  isPrimaryVacKitDressingDisabled: false,
  setIsPrimaryVacKitDressingPlusDisabled: () => {},
  isPrimaryVacKitDressingMinusDisabled: false,
  setIsPrimaryVacKitDressingMinusDisabled: () => {},
  isSecondaryVacKitDressingDisabled: false,
  setIsSecondaryVacKitDressingPlusDisabled: () => {},
  isSecondaryVacKitDressingMinusDisabled: false,
  setIsSecondaryVacKitDressingMinusDisabled: () => {},
  showAddDressingBtn: false,
  setShowAddDressingBtn: () => {},
  showAddtionalObject: mockShowAddtionalObject,
  setShowAdditionalObject: () => {},
  isCannisterProductPlusDisabled: false,
  setIsCannisterProductPlusDisabled: () => {},
  isCannisterProductMinusDisabled: false,
  setIsCannisterProductMinusDisabled: () => {},
  isPrescriberAddedOpenInfo: true,
  setIsPrescriberAddedOpenInfo: () => {},
  isPrescriberAddedOpenErrorInfo: true,
  setIsPrescriberAddedOpenErrorInfo: () => {},
  homecareproviderSearchAddPopUpSection:
    SearchHomeCareProviderModal.SEARCH_HOMECAREPROVIDER,
  setHomecareproviderSearchAddPopUpSection: () => {},
  searchHomeCareProviderPopup: false,
  setSearchHomeCareProviderPopup: () => {},
  setIsPrescriberUpdateEmail: () => {},
  showPrescriberUpdateEmail: false,
  active: false,
  setActive: () => {},
  caregiverSelected: false,
  setCaregiverSelected: () => {},
  shareOrderAddPopUpSection: SharedOrderModal.SHARE_ORDER,
  setshareOrderAddPopUpSection: () => {},
  shareOrderPopup: false,
  setshareOrderPopup: () => {},
  scrollableComponentClassName: undefined,
  setScrollableComponentClassName: () => {},
  sharedOrderTo: "",
  setSharedOrderTo: () => {},
  sharedOrderNote: "",
  setSharedOrderNote: () => {},
  isPartialOrder: false,
  setIsPartialOrder: () => {},
  IsLoadCustomDeliveryDate: false,
  setIsLoadCustomDeliveryDate: () => {},

  requesterInfo: {
    IsRequesterSameasSubmitter: mockInputFields(),
    requesterEmail: mockInputFields(),
    requesterFirstName: mockInputFields(),
    requesterLastName: mockInputFields(),
    requesterFacility: undefined,
    requesterFacilityAsDefault: false,
  },
  setRequesterInfo: () => {},
  productInfo: {
    productInformation: mockInputFields(),
    productValue: mockInputFields(),
  },
  setProductInfo: () => {},
  maxDate: mockInputFields(),
  setMaxDate: () => {},
  dressingKit: {
    productId: mockInputFields(),
    productCode: mockInputFields(),
    productSizeCode: mockInputFields(),
    productQuantity: mockInputFields(),
    productName: mockInputFields(),
    productSizeName: mockInputFields(),
    productSizeID: mockInputFields(),
    secProductName: mockInputFields(),
    secProductSizeName: mockInputFields(),
    secProductId: mockInputFields(),
    secProductCode: mockInputFields(),
    secProductSizeCode: mockInputFields(),
    secProductQuantity: mockInputFields(),
    secProductSizeID: mockInputFields(),
  },
  setDressingKit: () => {},
  canister: {
    canisterProductName: mockInputFields(),
    canisterProductCode: mockInputFields(),
    canisterProductQuantity: mockInputFields(),
    canisterProductID: mockInputFields(),
  },
  setCanister: () => {},
  accessory: {
    accessories: [],
  },
  setAccessory: () => {},
  showDialog: false,
  setShowDialog: () => {},

  deliveryInformation: {
    deliveryAddressLine1: mockInputFields(),
    deliveryAddressLine2: mockInputFields(),
    deliveryCity: mockInputFields(),
    deliveryProductNeedByDate: mockInputFields(),
    deliveryProductNeedByTime: mockInputFields(),
    deliverySiteType: mockInputFields(),
    deliveryState: mockInputFields(),
    deliveryZipCode: mockInputFields(),
    deliveryFacilityName: mockInputFields(),
  },
  setDeliveryInformation: () => {},

  isHandleChangeTriggered: false,
  setIsHandleChangeTriggered: () => {},
  vacOrderID: "",
  setVacOrderID: () => {},
  inventoryProductCount: -1,
  setInventoryProductCount: () => {},
});
